# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protocol_pb2 as protocol__pb2


class MensajeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sesion = channel.unary_unary(
                '/protocol.Mensaje/sesion',
                request_serializer=protocol__pb2.SesionRequest.SerializeToString,
                response_deserializer=protocol__pb2.SesionResponse.FromString,
                )
        self.enviarMensaje = channel.unary_unary(
                '/protocol.Mensaje/enviarMensaje',
                request_serializer=protocol__pb2.MensajeRequest.SerializeToString,
                response_deserializer=protocol__pb2.MensajeResponse.FromString,
                )
        self.escuchar = channel.unary_unary(
                '/protocol.Mensaje/escuchar',
                request_serializer=protocol__pb2.EscuchaRequest.SerializeToString,
                response_deserializer=protocol__pb2.EscuchaResponse.FromString,
                )


class MensajeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sesion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enviarMensaje(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def escuchar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MensajeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sesion': grpc.unary_unary_rpc_method_handler(
                    servicer.sesion,
                    request_deserializer=protocol__pb2.SesionRequest.FromString,
                    response_serializer=protocol__pb2.SesionResponse.SerializeToString,
            ),
            'enviarMensaje': grpc.unary_unary_rpc_method_handler(
                    servicer.enviarMensaje,
                    request_deserializer=protocol__pb2.MensajeRequest.FromString,
                    response_serializer=protocol__pb2.MensajeResponse.SerializeToString,
            ),
            'escuchar': grpc.unary_unary_rpc_method_handler(
                    servicer.escuchar,
                    request_deserializer=protocol__pb2.EscuchaRequest.FromString,
                    response_serializer=protocol__pb2.EscuchaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protocol.Mensaje', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mensaje(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sesion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Mensaje/sesion',
            protocol__pb2.SesionRequest.SerializeToString,
            protocol__pb2.SesionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enviarMensaje(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Mensaje/enviarMensaje',
            protocol__pb2.MensajeRequest.SerializeToString,
            protocol__pb2.MensajeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def escuchar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Mensaje/escuchar',
            protocol__pb2.EscuchaRequest.SerializeToString,
            protocol__pb2.EscuchaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
