/*
Definición de las estructuras de los mensajes que se intercambian entre el servidor y los clientes.

Author: Isaac Fabián Palma Medina y Karla Verónica Quiros Delgado
Date: June 7, 2023
*/

syntax = "proto3";
package protocol;

service Mensaje {
    rpc sesion (SesionRequest) returns (SesionResponse) {}
    rpc enviarMensaje (MensajeRequest) returns (MensajeResponse) {}
    rpc escuchar (EscuchaRequest) returns (EscuchaResponse) {}
}

message SesionRequest {
    int32 tipo = 1; // Tipo de mensaje 1 = Login, 2 = Logout.
    string idUsuario = 2; // ID del usuario que quiere iniciar sesión o cerrar sesión.
    int32 tipoUsuario = 3; // Tipo de usuario 1 = Productor, 2 = Suscriptor.
    string suscripciones = 4; // Lista de suscripciones del usuario, un productor no tiene suscripciones, separadas por coma.
}

message SesionResponse {
    int32 estado = 1; // Estado de la sesión.
    // Añadir una descripción del error.
}

message MensajeRequest {
    string identificador = 1; // ID del mensaje.
    int32 idTema = 2; // ID del tema al que pertenece el mensaje 1, 2 ó 3.
    string idUsuarioEmisor = 3; // ID del usuario (productor) que envía el mensaje.
    string contenido = 4; // Contenido del mensaje.
}

message MensajeResponse {
    string identificador = 1; // ID del mensaje.
    string idUsuarioEmisor = 2; // ID del usuario que leyó ó recibió el mensaje (puede ser "Servidor").
    int32 estado = 3; // Estado del mensaje.
}

message MensajeStruct {
    string identificador = 1;
    int32 idTema = 2;
    string idUsuarioEmisor = 3;
    string contenido = 4;
}

message EscuchaRequest {
    string idUsuario = 1; // ID del usuario que quiere escuchar si hay mensajes.
}

message EscuchaResponse {
    int32 estado = 1; // Estado de la escucha.
    repeated MensajeStruct mensajes = 2; // Lista de mensajes.
}